include c.snip

# Delete snippet depended on C.
delete struct
delete struct_typedef
delete enum
delete main
delete inc
delete inc2
delete Inc
delete Def
delete def
delete once
delete printf
delete fprintf
delete for

snippet     foreach
abbr        foreach() {}
    foreach (${1:#:var}; ${2:#:list}) {
        ${3:TARGET}
    }

snippet     for
options     head
abbr        for () {}
    for (${1:int} ${2:i} = ${3:0}; $2 < ${4}; ++$2) {
        ${0:#:TARGET}
    }

snippet     while
options     head
abbr        while () {}
    while (${1:#:condition}) {
        ${0:TARGET}
    }

snippet     do_while
options     head
alias       do
    do {
        ${0:TARGET:code}
    } while (${1:#:condition});

snippet     class
abbr        class {}
    class ${1:#:name} {
        ${2:TARGET}
    }

snippet     struct
abbr        struct {}
    struct ${1:#:name} {
        ${2:TARGET}
    }

snippet     enum
abbr        enum {}
    enum ${1:#:name} {
        ${2:TARGET}
    }

snippet     if
options     head
abbr        if () {}
    if (${1:#:condition}) {
        ${0:TARGET}
    }

snippet else
options     head
    else {
        ${0:TARGET}
    }


snippet elseif
options     head
    else if (${1:#:condition}) {
        ${0:TARGET}
    }

snippet     ifelse
options     head
abbr        if () {} else {}
    if (${1:#:condition}) {
        ${2:TARGET}
    } else {
        ${3}
    }

snippet     switch
options     head
abbr        switch () {}
    switch (${1:#:var}) {
        case ${2:#:val}:
            ${0:TARGET}
            break;
    }

snippet unionfind
options head
abbr UnionFind {}
  struct UnionFind {
    private {
      size_t[] par_;
      size_t[] size_;
    }

    this(size_t n) {
      import std.range : iota, array;

      par_ = iota(n).array;

      size_ = new size_t[n];
      size_[0 .. $] = 1;
    }

    void merge(size_t x, size_t y) {
      import std.algorithm : swap;

      x = root(x);
      y = root(y);

      if (x != y) {
        if (size_[x] < size_[y]) {
          swap(x, y);
        }

        par_[y] = x;
        size_[x] += size_[y];
      }
    }

    bool isSame(size_t x, size_t y) {
      return root(x) == root(y);
    }

    size_t root(size_t x) {
      if (x == par_[x]) {
        return x;
      }

      par_[x] = root(par_[x]);
      return par_[x];
    }

    size_t size(int x) {
      return size_[root(x)];
    }
  }

snippet modint
options head
  struct ModInt(ulong modulus) {
    import std.traits : isIntegral, isBoolean;
    import std.exception : enforce;

    private {
      ulong val;
    }

    this(const ulong n) {
      val = n % modulus;
    }

    this(const ModInt n) {
      val = n.value;
    }

    @property {
      ref inout(ulong) value() inout {
        return val;
      }
    }

    T opCast(T)() {
      static if (isIntegral!T) {
        return cast(T)(val);
      } else if (isBoolean!T) {
        return val != 0;
      } else {
        enforce(false, "cannot cast from " ~ this.stringof ~ " to " ~ T.stringof ~ ".");
      }
    }

    ModInt opAssign(const ulong n) {
      val = n % modulus;
      return this;
    }

    ModInt opOpAssign(string op)(ModInt rhs) {
      static if (op == "+") {
        val += rhs.value;
        if (val >= modulus) {
          val -= modulus;
        }
      } else if (op == "-") {
        if (val < rhs.value) {
          val += modulus;
        }
        val -= rhs.value;
      } else if (op == "*") {
        val = val * rhs.value % modulus;
      } else if (op == "/") {
        this *= rhs.inv;
      } else if (op == "^^") {
        ModInt res = 1;
        ModInt t = this;
        while (rhs.value > 0) {
          if (rhs.value % 2 != 0) {
            res *= t;
          }
          t *= t;
          rhs /= 2;
        }
        this = res;
      } else {
        enforce(false, op ~ "= is not implemented.");
      }

      return this;
    }

    ModInt opOpAssign(string op)(ulong rhs) {
      static if (op == "+") {
        val += rhs;
        if (val >= modulus) {
          val -= modulus;
        }
      } else if (op == "-") {
        if (val < rhs) {
          val += modulus;
        }
        val -= rhs;
      } else if (op == "*") {
        val = val * rhs % modulus;
      } else if (op == "/") {
        this *= ModInt(rhs).inv;
      } else if (op == "^^") {
        ModInt res = 1;
        ModInt t = this;
        while (rhs > 0) {
          if (rhs % 2 != 0) {
            res *= t;
          }
          t *= t;
          rhs /= 2;
        }
        this = res;
      } else {
        enforce(false, op ~ "= is not implemented.");
      }

      return this;
    }

    ModInt opUnary(string op)() {
      static if (op == "++") {
        this += 1;
      } else if (op == "--") {
        this -= 1;
      } else {
        enforce(false, op ~ " is not implemented.");
      }
      return this;
    }

    ModInt opBinary(string op)(const ulong rhs) const {
      mixin("return ModInt(this) " ~ op ~ "= rhs;");
    }

    ModInt opBinary(string op)(ref const ModInt rhs) const {
      mixin("return ModInt(this) " ~ op ~ "= rhs;");
    }

    ModInt opBinary(string op)(const ModInt rhs) const {
      mixin("return ModInt(this) " ~ op ~ "= rhs;");
    }

    ModInt opBinaryRight(string op)(const ulong lhs) const {
      mixin("return ModInt(this) " ~ op ~ "= lhs;");
    }

    long opCmp(ref const ModInt rhs) const {
      return cast(long)value - cast(long)rhs.value;
    }

    bool opEquals(const ulong rhs) const {
      return value == ModInt(rhs).value;
    }

    ModInt inv() const {
      ModInt ret = this;
      ret^^=modulus - 2;
      return ret;
    }

    string toString() const {
      import std.format : format;

      return format("%s", val);
    }
  }

  template isModInt(T) {
    immutable enum isModInt = is(T: ModInt!M, uint M);
  }

  T[] makeFactTable(T)(size_t n) if (isModInt!T) {
    import std.range : take, recurrence;
    import std.array : array;

    return T(1).recurrence!((a, n) => a[n - 1] * n).take(n).array;
  }

  T[] makeInvFactTable(T)(size_t n) if (isModInt!T) {
    auto fact = makeFactTable!T(n);
    T[] invFact = new T[n];
    foreach (i; 0 .. n) {
      invFact[i] = fact[i].inv;
    }

    return invFact;
  }

  T combi(T)(size_t n, size_t r) if (isModInt!T) {
    static fact = makeFactTable!T(n + 1);
    static invFact = makeInvFactTable!T(n + 1);

    return fact[n] * invFact[r] * invFact[n - r];
  }

